# 登录和注册功能实现规范

## 项目结构
```
creative-marketplace/
├── pages/
│   ├── auth/
│   │   ├── login.vue    # 登录页面
│   │   └── register.vue # 注册页面
├── components/
│   └── auth/
│       ├── LoginForm.vue    # 登录表单组件
│       └── RegisterForm.vue # 注册表单组件
├── composables/
│   └── useAuth.ts       # 认证相关的组合式函数
├── server/
│   └── api/
│       └── auth/
│           ├── login.post.ts    # 登录API
│           └── register.post.ts # 注册API
└── types/
    └── auth.ts          # 认证相关类型定义
```

## 功能规范

### 1. 用户注册
- 必填字段：
  - 用户名（username）：3-20个字符
  - 邮箱（email）：有效的邮箱格式
  - 密码（password）：至少8个字符，包含字母和数字
- 可选字段：
  - 昵称（nickname）
  - 头像（avatar）

### 2. 用户登录
- 支持方式：
  - 邮箱 + 密码
  - 用户名 + 密码
- 登录成功后：
  - 返回JWT token
  - 存储用户信息到状态管理
  - 重定向到首页或之前的页面

### 3. 安全要求
- 密码加密：使用bcrypt
- API保护：使用JWT认证
- 表单验证：前端和后端都需要验证
- CSRF保护：实现CSRF token

### 4. 状态管理
- 使用Pinia进行状态管理
- 存储用户信息和认证状态
- 实现持久化存储

### 5. UI/UX规范
- 响应式设计：支持移动端和桌面端
- 表单验证反馈：实时显示错误信息
- 加载状态：显示加载动画
- 错误处理：友好的错误提示

### 6. API接口

#### 注册接口
```typescript
POST /api/auth/register
Request:
{
  username: string;
  email: string;
  password: string;
  nickname?: string;
  avatar?: string;
}
Response:
{
  success: boolean;
  message: string;
  user?: {
    id: string;
    username: string;
    email: string;
    nickname?: string;
    avatar?: string;
  }
}
```

#### 登录接口
```typescript
POST /api/auth/login
Request:
{
  username?: string;
  email?: string;
  password: string;
}
Response:
{
  success: boolean;
  message: string;
  token?: string;
  user?: {
    id: string;
    username: string;
    email: string;
    nickname?: string;
    avatar?: string;
  }
}
```

## 开发流程
1. 创建必要的页面和组件
2. 实现API接口
3. 添加状态管理
4. 实现表单验证
5. 添加错误处理
6. 优化用户体验
7. 进行测试

## 测试要求
- 单元测试：组件和函数测试
- 集成测试：API接口测试
- E2E测试：用户流程测试 